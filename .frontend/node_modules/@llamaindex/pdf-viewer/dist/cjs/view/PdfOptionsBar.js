"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const icon_js_1 = require("./icon.js");
const usePdfViewer_js_1 = require("../hooks/usePdfViewer.js");
const PDFOptionsBar = ({ file, scrolledIndex, numPages, scaleText, nextPage, prevPage, handleZoomIn, handleZoomOut, goToPage, setZoomLevel, zoomInEnabled, zoomOutEnabled, }) => {
    const [inputValue, setInputValue] = (0, react_1.useState)(`${scrolledIndex + 1}`);
    (0, react_1.useEffect)(() => {
        setInputValue(`${scrolledIndex + 1}`);
    }, [scrolledIndex]);
    const handleZoomSelection = (zoom) => {
        setZoomLevel(zoom);
    };
    const handleChange = (e) => {
        setInputValue(e.target.value);
    };
    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            const value = parseInt(inputValue, 10);
            if (!isNaN(value) && value > 0) {
                scrollToPage(value - 1);
            }
        }
    };
    const scrollToPage = (page) => {
        goToPage(page);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "optionBar", children: [(0, jsx_runtime_1.jsxs)("div", { className: "title truncate", children: ["File ID: ", file.id] }), (0, jsx_runtime_1.jsxs)("div", { className: "control", children: [(0, jsx_runtime_1.jsxs)("div", { className: "pageControl", children: [(0, jsx_runtime_1.jsx)("button", { className: "pageUp", onClick: prevPage, disabled: scrolledIndex === 0, children: (0, jsx_runtime_1.jsx)(icon_js_1.CaretUpIcon, {}) }), (0, jsx_runtime_1.jsx)("input", { className: "pageInput", value: inputValue, onChange: handleChange, onKeyDown: handleKeyDown }), (0, jsx_runtime_1.jsx)("button", { className: "pageDown", onClick: nextPage, disabled: scrolledIndex === numPages - 1, children: (0, jsx_runtime_1.jsx)(icon_js_1.CaretDownIcon, {}) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "zoomControl", children: [(0, jsx_runtime_1.jsx)("button", { className: "zoomOut", onClick: handleZoomOut, disabled: !zoomOutEnabled, children: (0, jsx_runtime_1.jsx)(icon_js_1.ZoomOutIcon, {}) }), (0, jsx_runtime_1.jsx)("select", { className: "zoomSelect", value: scaleText, onChange: (e) => handleZoomSelection(e.target.value), children: usePdfViewer_js_1.zoomLevels.map((zoom, index) => ((0, jsx_runtime_1.jsx)("option", { value: zoom, children: zoom }, index))) }), (0, jsx_runtime_1.jsx)("button", { className: "zoomIn", onClick: handleZoomIn, disabled: !zoomInEnabled, children: (0, jsx_runtime_1.jsx)(icon_js_1.ZoomInIcon, {}) })] })] })] }));
};
PDFOptionsBar.displayName = 'PDFOptionsBar';
exports.default = PDFOptionsBar;
