"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zoomLevels = void 0;
// usePDFViewer.ts
const react_1 = __importStar(require("react"));
const usePdfFocus_js_1 = require("./usePdfFocus.js");
exports.zoomLevels = ['50%', '80%', '100%', '130%', '200%', '300%', '400%'];
const startZoomLevelIdx = 2;
const usePDFViewer = (file) => {
    const [scrolledIndex, setScrolledIndex] = (0, react_1.useState)(1);
    const [scale, setScale] = (0, react_1.useState)(1.0);
    const [scaleFit, setScaleFit] = (0, react_1.useState)(1.0);
    const [numPages, setNumPages] = (0, react_1.useState)(0);
    const [isPdfRendered, setIsPdfRendered] = (0, react_1.useState)(false);
    const [zoomLevelIdx, setZoomLevelIdx] = (0, react_1.useState)(startZoomLevelIdx);
    const { pdfFocusState } = (0, usePdfFocus_js_1.usePdfFocus)();
    const pdfFocusRef = react_1.default.useRef(null);
    const goToPage = (page) => {
        if (pdfFocusRef.current) {
            pdfFocusRef.current.scrollToPage(page);
        }
    };
    (0, react_1.useEffect)(() => {
        const activeDocumentId = pdfFocusState.documentId;
        if (activeDocumentId === file.id) {
            if (pdfFocusState.pageNumber) {
                goToPage(pdfFocusState.pageNumber - 1);
            }
        }
    }, [file, pdfFocusState]);
    const setCurrentPageNumber = (0, react_1.useCallback)((n) => {
        setScrolledIndex(n);
    }, []);
    const handleZoomIn = (0, react_1.useCallback)(() => {
        const nextLevel = zoomLevelIdx + 1;
        if (nextLevel >= exports.zoomLevels.length) {
            return;
        }
        setZoomLevel(exports.zoomLevels[nextLevel] || '100%');
    }, [zoomLevelIdx, scrolledIndex, pdfFocusRef]);
    const handleZoomOut = (0, react_1.useCallback)(() => {
        const nextLevel = zoomLevelIdx - 1;
        if (nextLevel < 0) {
            return;
        }
        setZoomLevel(exports.zoomLevels[nextLevel] || '100%');
    }, [zoomLevelIdx, scrolledIndex, pdfFocusRef]);
    const nextPage = () => {
        goToPage(scrolledIndex + 1);
    };
    const prevPage = () => {
        goToPage(scrolledIndex - 1);
    };
    const toPercentPlusBase = (n) => {
        return `${100 + n * 100}%`;
    };
    const setZoomLevel = (0, react_1.useCallback)((zoomLevel) => {
        const newZoomLevelIdx = exports.zoomLevels.indexOf(zoomLevel);
        const newScale = percentToScale(zoomLevel) + scaleFit - 1;
        setScale(newScale);
        setTimeout(() => {
            goToPage(scrolledIndex);
        }, 30);
        setZoomLevelIdx(newZoomLevelIdx);
    }, [scrolledIndex]);
    function percentToScale(percent) {
        const number = parseInt(percent, 10);
        return number / 100;
    }
    const scaleDiff = Math.round((scale - scaleFit) * 10) / 10;
    const scaleText = toPercentPlusBase(scaleDiff);
    (0, react_1.useEffect)(() => {
        setScale(scaleFit);
    }, [scaleFit]);
    const zoomInEnabled = zoomLevelIdx < exports.zoomLevels.length - 1;
    const zoomOutEnabled = zoomLevelIdx > 0;
    return {
        scrolledIndex,
        setCurrentPageNumber,
        scale,
        setScaleFit,
        numPages,
        setNumPages,
        handleZoomIn,
        handleZoomOut,
        nextPage,
        prevPage,
        scaleText,
        isPdfRendered,
        setIsPdfRendered,
        pdfFocusRef,
        goToPage,
        setZoomLevel,
        zoomInEnabled,
        zoomOutEnabled,
    };
};
exports.default = usePDFViewer;
