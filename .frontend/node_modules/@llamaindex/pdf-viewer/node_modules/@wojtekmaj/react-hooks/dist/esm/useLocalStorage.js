import { useCallback, useState } from 'react';
import useEventListener from './useEventListener';
var isBrowser = typeof document !== 'undefined';
/**
 * Returns a stateful value synchronized with localStorage, and a function to update it.
 *
 * @param {string} key localStorage key
 * @param {*} initialState Initial state
 */
export default function useLocalStorage(key, initialState) {
    var _a = useState(function () {
        if (!isBrowser) {
            return initialState;
        }
        var rawValue = localStorage.getItem(key);
        return rawValue !== null ? JSON.parse(rawValue) : initialState;
    }), value = _a[0], setValue = _a[1];
    var onChange = useCallback(function (nextValueOrFunction) {
        var nextValue = nextValueOrFunction instanceof Function ? nextValueOrFunction(value) : nextValueOrFunction;
        if (isBrowser) {
            localStorage.setItem(key, JSON.stringify(nextValue));
        }
        setValue(nextValue);
    }, [key, value]);
    var onStorage = useCallback(function (event) {
        if (event.key !== key) {
            return;
        }
        var rawValue = event.newValue;
        var nextValue = rawValue !== null ? JSON.parse(rawValue) : null;
        if (nextValue !== value) {
            setValue(nextValue);
        }
    }, [key, value]);
    useEventListener(isBrowser ? window : null, 'storage', onStorage);
    return [value, onChange];
}
