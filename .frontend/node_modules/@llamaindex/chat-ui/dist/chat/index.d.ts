import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';

type MessageRole = 'system' | 'user' | 'assistant' | 'data';
interface Message {
    content: string;
    role: MessageRole;
    annotations?: any;
}
type ChatHandler = {
    input: string;
    setInput: (input: string) => void;
    isLoading: boolean;
    messages: Message[];
    reload?: (chatRequestOptions?: {
        data?: any;
    }) => void;
    stop?: () => void;
    append: (message: Message, chatRequestOptions?: {
        data?: any;
    }) => Promise<string | null | undefined>;
};
type ChatContext = ChatHandler & {
    requestData: any;
    setRequestData: (data: any) => void;
};

declare enum MessageAnnotationType {
    IMAGE = "image",
    DOCUMENT_FILE = "document_file",
    SOURCES = "sources",
    EVENTS = "events",
    SUGGESTED_QUESTIONS = "suggested_questions",
    AGENT_EVENTS = "agent"
}
type ImageData = {
    url: string;
};
type DocumentFileType = 'csv' | 'pdf' | 'txt' | 'docx';
declare const DOCUMENT_FILE_TYPES: DocumentFileType[];
type DocumentFile = {
    id: string;
    name: string;
    size: number;
    type: DocumentFileType;
    url: string;
    refs?: string[];
};
type DocumentFileData = {
    files: DocumentFile[];
};
type SourceNode = {
    id: string;
    metadata: Record<string, unknown>;
    score?: number;
    text: string;
    url: string;
};
type SourceData = {
    nodes: SourceNode[];
};
type EventData = {
    title: string;
};
type ProgressData = {
    id: string;
    total: number;
    current: number;
};
type AgentEventData = {
    agent: string;
    text: string;
    type: 'text' | 'progress';
    data?: ProgressData;
};
type SuggestedQuestionsData = string[];
type AnnotationData = ImageData | DocumentFileData | SourceData | EventData | AgentEventData | SuggestedQuestionsData;
type MessageAnnotation = {
    type: MessageAnnotationType;
    data: AnnotationData;
};
declare function getAnnotationData<T extends AnnotationData>(annotations: MessageAnnotation[], type: string): T[];
declare function getSourceAnnotationData(annotations: MessageAnnotation[]): SourceData[];

interface ChatSectionProps extends React.PropsWithChildren {
    handler: ChatHandler;
    className?: string;
}
declare function ChatSection(props: ChatSectionProps): react_jsx_runtime.JSX.Element;

interface ChatInputProps extends React.PropsWithChildren {
    className?: string;
    resetUploadedFiles?: () => void;
    annotations?: any;
}
interface ChatInputFormProps extends React.PropsWithChildren {
    className?: string;
}
interface ChatInputFieldProps {
    className?: string;
    type?: 'input' | 'textarea';
    placeholder?: string;
}
interface ChatInputUploadProps {
    className?: string;
    onUpload?: (file: File) => Promise<void> | undefined;
    allowedExtensions?: string[];
    multiple?: boolean;
}
interface ChatInputSubmitProps extends React.PropsWithChildren {
    className?: string;
    disabled?: boolean;
}
interface ChatInputContext {
    isDisabled: boolean;
    handleKeyDown: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;
    handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
}
declare const useChatInput: () => ChatInputContext;
declare function ChatInput(props: ChatInputProps): react_jsx_runtime.JSX.Element;
declare namespace ChatInput {
    var Form: typeof ChatInputForm;
    var Field: typeof ChatInputField;
    var Upload: typeof ChatInputUpload;
    var Submit: typeof ChatInputSubmit;
}
declare function ChatInputForm(props: ChatInputFormProps): react_jsx_runtime.JSX.Element;
declare function ChatInputField(props: ChatInputFieldProps): react_jsx_runtime.JSX.Element;
declare function ChatInputUpload(props: ChatInputUploadProps): react_jsx_runtime.JSX.Element;
declare function ChatInputSubmit(props: ChatInputSubmitProps): react_jsx_runtime.JSX.Element;

interface ChatMessagesProps extends React.PropsWithChildren {
    className?: string;
}
interface ChatMessagesListProps extends React.PropsWithChildren {
    className?: string;
}
interface ChatMessagesLoadingProps extends React.PropsWithChildren {
    className?: string;
}
interface ChatActionsProps extends React.PropsWithChildren {
    className?: string;
}
interface ChatMessagesContext {
    isPending: boolean;
    showReload?: boolean;
    showStop?: boolean;
    messageLength: number;
    lastMessage: Message;
}
declare const useChatMessages: () => ChatMessagesContext;
declare function ChatMessages(props: ChatMessagesProps): react_jsx_runtime.JSX.Element;
declare namespace ChatMessages {
    var List: typeof ChatMessagesList;
    var Loading: typeof ChatMessagesLoading;
    var Actions: typeof ChatActions;
}
declare function ChatMessagesList(props: ChatMessagesListProps): react_jsx_runtime.JSX.Element;
declare function ChatMessagesLoading(props: ChatMessagesLoadingProps): react_jsx_runtime.JSX.Element | null;
declare function ChatActions(props: ChatActionsProps): react_jsx_runtime.JSX.Element | null;

interface ChatMessageProps extends React.PropsWithChildren {
    message: Message;
    isLast: boolean;
    className?: string;
    isLoading?: boolean;
    append?: ChatHandler['append'];
}
interface ChatMessageAvatarProps extends React.PropsWithChildren {
    className?: string;
}
declare enum ContentPosition {
    TOP = -9999,
    CHAT_EVENTS = 0,
    AFTER_EVENTS = 1,
    CHAT_AGENT_EVENTS = 2,
    AFTER_AGENT_EVENTS = 3,
    CHAT_IMAGE = 4,
    AFTER_IMAGE = 5,
    BEFORE_MARKDOWN = 6,
    MARKDOWN = 7,
    AFTER_MARKDOWN = 8,
    CHAT_DOCUMENT_FILES = 9,
    AFTER_DOCUMENT_FILES = 10,
    CHAT_SOURCES = 11,
    AFTER_SOURCES = 12,
    SUGGESTED_QUESTIONS = 13,
    AFTER_SUGGESTED_QUESTIONS = 14,
    BOTTOM = 9999
}
type ContentDisplayConfig = {
    position: ContentPosition;
    component: React.ReactNode | null;
};
interface ChatMessageContentProps extends React.PropsWithChildren {
    className?: string;
    content?: ContentDisplayConfig[];
    isLoading?: boolean;
    append?: ChatHandler['append'];
    message?: Message;
}
interface ChatMessageActionsProps extends React.PropsWithChildren {
    className?: string;
}
interface ChatMessageContext {
    message: Message;
    isLast: boolean;
}
declare const useChatMessage: () => ChatMessageContext;
declare function ChatMessage(props: ChatMessageProps): react_jsx_runtime.JSX.Element;
declare function ChatMessageAvatar(props: ChatMessageAvatarProps): react_jsx_runtime.JSX.Element;
declare function ChatMessageContent(props: ChatMessageContentProps): react_jsx_runtime.JSX.Element;
declare function ChatMessageActions(props: ChatMessageActionsProps): react_jsx_runtime.JSX.Element;
type ComposibleChatMessage = typeof ChatMessage & {
    Avatar: typeof ChatMessageAvatar;
    Content: typeof ChatMessageContent;
    Actions: typeof ChatMessageActions;
};
declare const PrimiviteChatMessage: ComposibleChatMessage;

declare const useChatUI: () => ChatContext;

declare function useFile({ uploadAPI }: {
    uploadAPI: string;
}): {
    imageUrl: string | null;
    setImageUrl: react.Dispatch<react.SetStateAction<string | null>>;
    files: DocumentFile[];
    removeDoc: (file: DocumentFile) => void;
    reset: () => void;
    getAnnotations: () => ({
        type: string;
        data: {
            url: string;
            files?: undefined;
        };
    } | {
        type: string;
        data: {
            files: DocumentFile[];
            url?: undefined;
        };
    })[];
    uploadFile: (file: File, requestParams?: any) => Promise<boolean | void>;
};

export { type AgentEventData, type AnnotationData, type ChatContext, type ChatHandler, ChatInput, PrimiviteChatMessage as ChatMessage, ChatMessages, ChatSection, ContentPosition, DOCUMENT_FILE_TYPES, type DocumentFile, type DocumentFileData, type DocumentFileType, type EventData, type ImageData, type Message, type MessageAnnotation, MessageAnnotationType, type ProgressData, type SourceData, type SourceNode, type SuggestedQuestionsData, getAnnotationData, getSourceAnnotationData, useChatInput, useChatMessage, useChatMessages, useChatUI, useFile };
