import * as react_jsx_runtime from 'react/jsx-runtime';
import { FC } from 'react';

type ImageData = {
    url: string;
};
type DocumentFileType = 'csv' | 'pdf' | 'txt' | 'docx';
type DocumentFile = {
    id: string;
    name: string;
    size: number;
    type: DocumentFileType;
    url: string;
    refs?: string[];
};
type DocumentFileData = {
    files: DocumentFile[];
};
type SourceNode = {
    id: string;
    metadata: Record<string, unknown>;
    score?: number;
    text: string;
    url: string;
};
type SourceData = {
    nodes: SourceNode[];
};
type EventData = {
    title: string;
};
type ProgressData = {
    id: string;
    total: number;
    current: number;
};
type AgentEventData = {
    agent: string;
    text: string;
    type: 'text' | 'progress';
    data?: ProgressData;
};
type SuggestedQuestionsData = string[];

declare function ChatAgentEvents({ data, isFinished, }: {
    data: AgentEventData[];
    isFinished: boolean;
}): react_jsx_runtime.JSX.Element;

declare function ChatEvents({ data, showLoading, }: {
    data: EventData[];
    showLoading: boolean;
}): react_jsx_runtime.JSX.Element;

declare function ChatFiles({ data }: {
    data: DocumentFileData;
}): react_jsx_runtime.JSX.Element | null;

type MessageRole = 'system' | 'user' | 'assistant' | 'data';
interface Message {
    content: string;
    role: MessageRole;
    annotations?: any;
}
type ChatHandler = {
    input: string;
    setInput: (input: string) => void;
    isLoading: boolean;
    messages: Message[];
    reload?: (chatRequestOptions?: {
        data?: any;
    }) => void;
    stop?: () => void;
    append: (message: Message, chatRequestOptions?: {
        data?: any;
    }) => Promise<string | null | undefined>;
};

declare function ChatImage({ data }: {
    data: ImageData;
}): react_jsx_runtime.JSX.Element;

declare function ChatSources({ data }: {
    data: SourceData;
}): react_jsx_runtime.JSX.Element | null;

declare function Markdown({ content, sources, backend, }: {
    content: string;
    sources?: SourceData;
    backend?: string;
}): react_jsx_runtime.JSX.Element;

interface Props {
    language: string;
    value: string;
    className?: string;
}
declare const CodeBlock: FC<Props>;

interface PdfDialogProps {
    documentId: string;
    url: string;
    trigger: React.ReactNode;
}
declare function PdfDialog(props: PdfDialogProps): react_jsx_runtime.JSX.Element;

declare function SuggestedQuestions({ questions, append, }: {
    questions: SuggestedQuestionsData;
    append: ChatHandler['append'];
}): false | react_jsx_runtime.JSX.Element;

interface StarterQuestionsProps {
    questions: string[];
    append: ChatHandler['append'];
}
declare function StarterQuestions(props: StarterQuestionsProps): react_jsx_runtime.JSX.Element;

type Document = {
    url: string;
    sources: SourceNode[];
};
declare function DocumentInfo({ document, className, onRemove, startIndex, }: {
    document: Document;
    className?: string;
    onRemove?: () => void;
    startIndex?: number;
}): react_jsx_runtime.JSX.Element;

declare function ImagePreview({ url, onRemove, }: {
    url: string;
    onRemove: () => void;
}): react_jsx_runtime.JSX.Element;

interface FileUploaderProps {
    config?: {
        inputId?: string;
        fileSizeLimit?: number;
        allowedExtensions?: string[];
        checkExtension?: (extension: string) => string | null;
        disabled: boolean;
        multiple?: boolean;
    };
    onFileUpload: (file: File) => Promise<void>;
    onFileError?: (errMsg: string) => void;
}
declare function FileUploader({ config, onFileUpload, onFileError, }: FileUploaderProps): react_jsx_runtime.JSX.Element;

export { ChatAgentEvents, ChatEvents, ChatFiles, ChatImage, ChatSources, CodeBlock, DocumentInfo, FileUploader, ImagePreview, Markdown, PdfDialog, StarterQuestions, SuggestedQuestions };
